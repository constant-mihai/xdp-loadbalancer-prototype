// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64) && linux

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type xlbpConntrackKey struct {
	SrcIp    uint32
	SrcPort  uint16
	DstPort  uint16
	Protocol uint8
	_        [3]byte
}

type xlbpConntrackValue struct {
	ServiceIndex  uint32
	NattedSrcPort uint16
	_             [2]byte
}

type xlbpServicesByIndexValue struct{ Ipv4 uint32 }

// loadXlbp returns the embedded CollectionSpec for xlbp.
func loadXlbp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XlbpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xlbp: %w", err)
	}

	return spec, err
}

// loadXlbpObjects loads xlbp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xlbpObjects
//	*xlbpPrograms
//	*xlbpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXlbpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXlbp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xlbpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xlbpSpecs struct {
	xlbpProgramSpecs
	xlbpMapSpecs
	xlbpVariableSpecs
}

// xlbpProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xlbpProgramSpecs struct {
	IngressInternal *ebpf.ProgramSpec `ebpf:"ingress_internal"`
	LoadBalance     *ebpf.ProgramSpec `ebpf:"load_balance"`
}

// xlbpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xlbpMapSpecs struct {
	ByteCounters    *ebpf.MapSpec `ebpf:"byte_counters"`
	Conntrack       *ebpf.MapSpec `ebpf:"conntrack"`
	PacketCounters  *ebpf.MapSpec `ebpf:"packet_counters"`
	RoundRobinIndex *ebpf.MapSpec `ebpf:"round_robin_index"`
	ServicesByIndex *ebpf.MapSpec `ebpf:"services_by_index"`
	XdpTxPorts      *ebpf.MapSpec `ebpf:"xdp_tx_ports"`
}

// xlbpVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xlbpVariableSpecs struct {
}

// xlbpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXlbpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xlbpObjects struct {
	xlbpPrograms
	xlbpMaps
	xlbpVariables
}

func (o *xlbpObjects) Close() error {
	return _XlbpClose(
		&o.xlbpPrograms,
		&o.xlbpMaps,
	)
}

// xlbpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXlbpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xlbpMaps struct {
	ByteCounters    *ebpf.Map `ebpf:"byte_counters"`
	Conntrack       *ebpf.Map `ebpf:"conntrack"`
	PacketCounters  *ebpf.Map `ebpf:"packet_counters"`
	RoundRobinIndex *ebpf.Map `ebpf:"round_robin_index"`
	ServicesByIndex *ebpf.Map `ebpf:"services_by_index"`
	XdpTxPorts      *ebpf.Map `ebpf:"xdp_tx_ports"`
}

func (m *xlbpMaps) Close() error {
	return _XlbpClose(
		m.ByteCounters,
		m.Conntrack,
		m.PacketCounters,
		m.RoundRobinIndex,
		m.ServicesByIndex,
		m.XdpTxPorts,
	)
}

// xlbpVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadXlbpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xlbpVariables struct {
}

// xlbpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXlbpObjects or ebpf.CollectionSpec.LoadAndAssign.
type xlbpPrograms struct {
	IngressInternal *ebpf.Program `ebpf:"ingress_internal"`
	LoadBalance     *ebpf.Program `ebpf:"load_balance"`
}

func (p *xlbpPrograms) Close() error {
	return _XlbpClose(
		p.IngressInternal,
		p.LoadBalance,
	)
}

func _XlbpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xlbp_bpfel.o
var _XlbpBytes []byte
